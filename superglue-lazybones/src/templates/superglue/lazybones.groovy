@GrabResolver(name='jcenter', root='http://jcenter.bintray.com/')

// Stops handle bar lib from spitting out slf4j warnings.
@Grab(group='org.slf4j', module='slf4j-nop', version='1.7.9')

// Setup for handle bar template engine.
@Grab(group='uk.co.cacoethes', module='groovy-handlebars-engine', version='0.2')

import org.apache.commons.io.FileUtils
import uk.co.cacoethes.util.NameType
import uk.co.cacoethes.handlebars.HandlebarsTemplateEngine
import groovy.io.FileType

// Files with this name need to be replaced.
final String FILE_FILTER = 'SuperGlue'

// Set handle bar template engine as the defule engine.
registerDefaultEngine new HandlebarsTemplateEngine()

def props = [:]
props.packageName = ask("Define value for 'package' [com.example]: ", 'com.example', 'packageName')

String applicationNameInput = ask("Define value for 'applicationName' [Example]: ", 'Example', 'applicationName')
        .replace(" ", "")
        .capitalize()
String gradleProjectName = transformText(applicationNameInput, from: NameType.CAMEL_CASE, to: NameType.HYPHENATED)
String applicationName = transformText(applicationNameInput, from: NameType.HYPHENATED, to: NameType.CAMEL_CASE)

props.applicationName = applicationName
props.projectName = gradleProjectName
props.applicationNameCamelCase = applicationName[0].toLowerCase() + applicationName.substring(1)
props.applicationNameAllCaps = applicationName.toUpperCase()

processTemplates 'src/**/*.java', props
processTemplates 'src/**/*.xml', props
processTemplates 'build.gradle', props
processTemplates 'settings.gradle', props
processTemplates 'gradle/signing.gradle', props

projectDir.eachFileRecurse (FileType.FILES) { file ->
    if (file.name.contains(FILE_FILTER)) {
        destFile = new File(file.parent as File, file.name.replace(FILE_FILTER, applicationName) as String)
        FileUtils.moveFile(file as File, destFile as File)
    }
}

def getPackageDir(String value) { new File(projectDir as File, "src/$value/java/superglue") }
def getNewPackageDir(String newPackagePath, String value) { new File(projectDir as File, "src/$value/java/$newPackagePath") }
def getFileToDelete(String value) { new File(projectDir as File, "src/$value/java/superglue") }

String packagePath = props.packageName.replace(".", File.separator)

['internalDebug', 'internalRelease', 'main', 'production'].each {
    FileUtils.moveDirectory(getPackageDir(it), getNewPackageDir(packagePath, it))
    FileUtils.deleteDirectory(getFileToDelete(it))
}

// write out .gitignore
if (hasFeature('scmExclusions')) {
    scmExclusions '''
### Android ###
# Built application files
*.apk
*.ap_

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/

# Intellij
*.iml
.idea/workspace.xml
.idea/tasks.xml
.idea/gradle.xml
.idea/dictionaries
.idea/libraries

# Keystore files
*.jks

# External native build folder generated in Android Studio 2.2 and later
.externalNativeBuild

# Google Services (e.g. APIs or Firebase)
google-services.json

### Android Patch ###
gen-external-apklibs
'''
}